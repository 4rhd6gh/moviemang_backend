pipeline {
    agent any

    environment{
        GIT_COMMIT_HASH = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
        GIT_PRE_COMMIT_HASH = sh (script: "git show HEAD@{1} -1 --pretty=format:'%H'", returnStdout: true)
        GIT_PRE_COMMIT_TAG = "${GIT_PRE_COMMIT_HASH.substring(0,8)}"
        GIT_COMMIT_TAG = "${GIT_COMMIT_HASH.substring(0,8)}"
        SYSTEM_NAME = sh (returnStdout: true,
        script: """
            basename \$(git remote get-url origin) | sed -e "s/.git\$//"
        """)
    }
    
    stages {
        stage('STEP1----------------------------Docker Build!!!') {
            steps {
                sh 'docker ps -f name=node-backend -q | xargs --no-run-if-empty docker container stop'
                sh 'docker container ls -a -fname=node-backend -q | xargs -r docker container rm'
                sh 'docker images -f node-backend:latest | xargs --no-run-if-empty docker rmi -f'
                sh 'docker build -t node-backend:latest .'
            }
        }
        stage('STEP2----------------------------Docker Run!!!') {
            steps {
                sh 'docker images -qf dangling=true | xargs -I{} docker rmi {}' 
                sh 'docker run -d --name backend -p 8000:8000 node-backend:latest'
            }
        }
    }
    post{
        success {
            slackSend(
                channel: '#4-2_젠킨스_프론트엔드_빌드알림',
                color: 'good',
                message: "[Successful] Job:${SYSTEM_NAME} Commit:${GIT_COMMIT_HASH}"
            )
        }
        failure{
            slackSend(
                channel: '#4-2_젠킨스_프론트엔드_빌드알림',
                color: 'danger',
                message: "[Failed] Job:${SYSTEM_NAME} Commit:${GIT_COMMIT_HASH}"
            )
        }
    }
}